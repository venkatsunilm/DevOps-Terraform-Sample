name: Terraform CI/CD Workflow

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main
      - feat_*

jobs:
  terraform:
    runs-on: ubuntu-latest

    # Automatically choose the environment: default is "development", use "production" for the "main" branch
    environment:
      name: "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"

    env:
      # Terraform variables are pulled from GitHub Environment Variables
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      TF_VAR_environment: "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use here-doc usage to create the tfvars file with proper newlines
      # Error: Missing newline after argument
      - name: Create tfvars file from secrets & Print encrypted content
        run: |
          cat <<EOF > environments/$TF_VAR_environment.tfvars
          ${{ secrets.TFVARS }}
          EOF
          cat environments/$TF_VAR_environment.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: environments/shared

      # Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var-file="../$TF_VAR_environment.tfvars"
        working-directory: environments/shared

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply -var-file="../$TF_VAR_environment.tfvars" -auto-approve
        working-directory: environments/shared

      # Terraform Destroy
      - name: Terraform Destroy
        run: terraform destroy -var-file="../$TF_VAR_environment.tfvars" -auto-approve
        working-directory: environments/shared

  # Web App deployment job
  deploy-webapp:
    needs: terraform
    runs-on: ubuntu-latest

    # Automatically choose the environment: default is "development", use "production" for the "main" branch
    environment:
      name: "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}"

    env:
      # Terraform variables are pulled from GitHub Environment Variables
      REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
      AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}

      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: $AZURE_CREDENTIALS

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t $REGISTRY_NAME.azurecr.io/webapp:$GITHUB_SHA ./src/webapp

      # Login to Azure Container Registry (ACR)
      - name: ACR Login
        run: |
          az acr login --name $REGISTRY_NAME

      # Push Docker image to Azure Container Registry
      - name: Push Docker image
        run: docker push $REGISTRY_NAME.azurecr.io/webapp:$GITHUB_SHA

      # Deploy to AKS
      - name: Deploy to AKS
        run: |
          az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME
          kubectl set image deployment/webapp webapp=$REGISTRY_NAME.azurecr.io/webapp:$GITHUB_SHA
